#include "tarjeta.hpp"
#include "usuario.hpp"
#include <iomanip>

bool luhn(const Cadena& numero);

void eliminarChar(Cadena& c, size_t pos)
{
  Cadena aux = c.substr(0, pos);

  if( (pos + 1) < c.length() )
    aux += Cadena(c, pos + 1);
  c = move(aux);
}

//Por copia ya que se va a modificar la Cadena
Numero::Numero(const Cadena& num)
{
  char* aux = new char[num.length() + 1]{'\0'};

  size_t aux_i = 0;
  
  for (size_t i = 0; i < num.length(); ++i) {
    if (isspace(num[i]))
      // std::cout << "true" << std::endl;
      continue;
      // eliminarChar(num, i);
    
    if (num[i] < '0' or num[i] > '9')
      throw Incorrecto(Razon::DIGITOS);

    aux[aux_i++] = num[i];
  }

  num_ = aux;
  delete[] aux;
  
  if (num_.length() < 13 or num_.length() > 19)
    throw Incorrecto(Razon::LONGITUD);
  
  if (!luhn(num_))
    throw Incorrecto(Razon::NO_VALIDO);
  
  num_ = num;

  //Mostrar el num por la salida est√°ndar.
  //std::cout << num_ << std::endl;;
}

//CLASE TARJETA
Tarjeta::Tarjeta(Tipo t, const Numero& n, Usuario& u,
		 const Fecha& f):
  tip_(t), num_(n), user_(&u), cad_(f),
  titular_facial_(u.nombre() + " " + u.apellidos())
{
  Fecha actual; //Generamos una fecha actual
  if(actual > cad_)
    throw Caducada(f);

  u.es_titular_de(*this); //Le pasamos la tarjeta para asociarla al user
}

Tarjeta::~Tarjeta()
{
  if(user_ != nullptr)
    user_->no_es_titular_de(*this);
}

ostream& operator << (ostream& os, Tarjeta::Tipo const& tipo)
{
	int t = tipo;
	switch (t)
	{
		case 0:	os << " VISA ";
				break;
		case 1: os << " Mastercard ";
				break;
		case 2: os << " Maestro ";
				break;
		case 3: os << " JCB	";
				break;
		case 4: os << " AmericanExpress ";
				break;
	}

	return os;
}

ostream& operator << (ostream& os , const Tarjeta& t)
{
	os << t.tipo() << "\n" << t.numero() << "\n"
	   << t.titular_facial() << "\n" << "Caduca: "
	   << setfill('0') << setw(2)
	   << t.caducidad().mes() << "/" << setw(2)
	   << (t.caducidad().anno() % 100);

    return os;
}

